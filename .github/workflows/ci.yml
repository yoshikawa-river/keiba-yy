name: CI

on:
  push:
    branches: [ main, develop, 'feature/*', 'fix/*' ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  PYTHON_VERSION: '3.11'
  UV_VERSION: '0.4.15'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  lint:
    name: Lint Code
    runs-on: ubuntu-latest
    outputs:
      lint-passed: ${{ steps.lint-check.outputs.passed }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install uv
      uses: astral-sh/setup-uv@v3
      with:
        version: ${{ env.UV_VERSION }}

    - name: Cache dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/uv
          .venv
        key: ${{ runner.os }}-uv-${{ hashFiles('**/pyproject.toml', '**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-uv-

    - name: Install dependencies
      run: |
        uv venv
        uv pip install -r requirements.txt
        uv pip install -r requirements-dev.txt

    - name: Run linting checks
      id: lint-check
      run: |
        echo "Running linting checks..."
        LINT_FAILED=0

        # Ruff check
        if ! uv run ruff check src/ tests/ scripts/ --output-format=github; then
          LINT_FAILED=1
        fi

        # Format check
        if ! uv run ruff format --check src/ tests/ scripts/; then
          LINT_FAILED=1
        fi

        if [ $LINT_FAILED -eq 0 ]; then
          echo "passed=true" >> $GITHUB_OUTPUT
          echo "✅ All lint checks passed!"
        else
          echo "passed=false" >> $GITHUB_OUTPUT
          echo "❌ Lint checks failed!"
          exit 1
        fi

  test:
    name: Run Tests
    runs-on: ubuntu-latest
    needs: lint
    if: always()

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install uv
      uses: astral-sh/setup-uv@v3
      with:
        version: ${{ env.UV_VERSION }}

    - name: Cache dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/uv
          .venv
        key: ${{ runner.os }}-uv-${{ hashFiles('**/pyproject.toml', '**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-uv-

    - name: Install dependencies
      run: |
        uv venv
        uv pip install -r requirements.txt
        uv pip install -r requirements-dev.txt

    - name: Run tests
      run: |
        uv run pytest tests/ -v --tb=short --junitxml=test-results.xml --cov=src --cov-report=xml --cov-report=html --cov-report=term

    - name: Upload test results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: test-results
        path: |
          test-results.xml
          coverage.xml
          htmlcov/

    - name: Upload coverage to Codecov
      if: github.event_name == 'push'
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.xml
        fail_ci_if_error: false
        token: ${{ secrets.CODECOV_TOKEN }}

  build:
    name: Build Package
    runs-on: ubuntu-latest
    needs: [lint, test]
    if: success()

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install uv
      uses: astral-sh/setup-uv@v3
      with:
        version: ${{ env.UV_VERSION }}

    - name: Install build dependencies
      run: |
        uv venv
        uv pip install build twine

    - name: Build package
      run: |
        uv run python -m build

    - name: Check package
      run: |
        uv run twine check dist/*

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: dist
        path: dist/

  docker:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: [lint, test]
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Docker image
      uses: docker/build-push-action@v6
      with:
        context: .
        file: ./docker/python/Dockerfile
        push: false
        tags: |
          keiba-ai:latest
          keiba-ai:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  ci-status:
    name: CI Status
    runs-on: ubuntu-latest
    needs: [lint, test, build]
    if: always()

    steps:
    - name: Check CI Status
      run: |
        echo "## CI Status Report" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY

        # Lint status
        if [ "${{ needs.lint.result }}" == "success" ]; then
          echo "✅ **Lint:** Passed" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ **Lint:** Failed" >> $GITHUB_STEP_SUMMARY
        fi

        # Test status
        if [ "${{ needs.test.result }}" == "success" ]; then
          echo "✅ **Tests:** Passed" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ **Tests:** Failed" >> $GITHUB_STEP_SUMMARY
        fi

        # Build status
        if [ "${{ needs.build.result }}" == "success" ]; then
          echo "✅ **Build:** Passed" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ **Build:** Failed" >> $GITHUB_STEP_SUMMARY
        fi

        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
        echo "**Branch:** ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
        echo "**Triggered by:** ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY

        # Overall status
        if [ "${{ needs.lint.result }}" == "success" ] && [ "${{ needs.test.result }}" == "success" ] && [ "${{ needs.build.result }}" == "success" ]; then
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### ✅ All CI checks passed!" >> $GITHUB_STEP_SUMMARY
          exit 0
        else
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### ❌ CI checks failed!" >> $GITHUB_STEP_SUMMARY
          exit 1
        fi
