#!/bin/bash
# PR #25: уГЧуГнуВ╕уВзуВпуГИшинхоЪуБохЛХф╜Ьчв║шкНуВ╣уВпуГкуГЧуГИ

echo "========================================="
echo "PR #25: уГЧуГнуВ╕уВзуВпуГИшинхоЪуБохЛХф╜Ьчв║шкН"
echo "уГЦуГйуГ│уГБ: config/mykeibadb-settings"
echo "========================================="

# шЙ▓хоЪч╛й
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# уГЖуВ╣уГИч╡РцЮЬуВлуВжуГ│уВ┐уГ╝
TESTS_PASSED=0
TESTS_FAILED=0

# уГЖуВ╣уГИщЦвцХ░
run_test() {
    local test_name=$1
    local test_cmd=$2
    
    echo -e "\nЁЯФН Testing: $test_name"
    if eval "$test_cmd"; then
        echo -e "${GREEN}тЬЕ PASSED${NC}: $test_name"
        ((TESTS_PASSED++))
    else
        echo -e "${RED}тЭМ FAILED${NC}: $test_name"
        ((TESTS_FAILED++))
    fi
}

# 1. уГЦуГйуГ│уГБуБлхИЗуВКцЫ┐уБИ
echo -e "\n1я╕ПтГг уГЦуГйуГ│уГБуБохИЗуВКцЫ┐уБИ"
git checkout config/mykeibadb-settings 2>/dev/null || {
    echo -e "${RED}уВиуГйуГ╝: уГЦуГйуГ│уГБуБМшжЛуБдуБЛуВКуБ╛уБЫуВУ${NC}"
    exit 1
}

# 2. шинхоЪуГХуВбуВдуГлуБохнШхЬичв║шкН
echo -e "\n2я╕ПтГг шинхоЪуГХуВбуВдуГлуБохнШхЬичв║шкН"
run_test ".env.exampleуБохнШхЬи" "[ -f .env.example ]"
run_test "docker-compose.ymlуБохнШхЬи" "[ -f docker-compose.yml ]"
run_test "custom.cnfуБохнШхЬи" "[ -f docker/mysql/custom.cnf ]"
run_test "mykeibadb_connection.yamlуБохнШхЬи" "[ -f configs/mykeibadb_connection.yaml ]"
run_test "mykeibadb_tool_config.iniуБохнШхЬи" "[ -f configs/mykeibadb_tool_config.ini ]"

# 3. .env.exampleуБошинхоЪчв║шкН
echo -e "\n3я╕ПтГг чТ░хвГхдЙцХ░шинхоЪуБочв║шкН"
run_test "MYKEIBADB_HOSTшинхоЪ" "grep -q 'MYKEIBADB_HOST=' .env.example"
run_test "MYKEIBADB_USERшинхоЪ" "grep -q 'MYKEIBADB_USER=' .env.example"
run_test "MYKEIBADB_NAMEшинхоЪ" "grep -q 'MYKEIBADB_NAME=' .env.example"

# 4. MySQLшинхоЪуБочв║шкН
echo -e "\n4я╕ПтГг MySQLшинхоЪуБочв║шкНя╝Иcustom.cnfя╝Й"
run_test "innodb_strict_modeшинхоЪ" "grep -q 'innodb_strict_mode = 0' docker/mysql/custom.cnf"
run_test "innodb_file_per_tableшинхоЪ" "grep -q 'innodb_file_per_table = 1' docker/mysql/custom.cnf"
run_test "innodb_default_row_formatшинхоЪ" "grep -q 'innodb_default_row_format = DYNAMIC' docker/mysql/custom.cnf"
run_test "max_allowed_packetшинхоЪ" "grep -q 'max_allowed_packet' docker/mysql/custom.cnf"
run_test "innodb_buffer_pool_sizeшинхоЪ" "grep -q 'innodb_buffer_pool_size' docker/mysql/custom.cnf"

# 5. docker-compose.ymlуБоMySQLшинхоЪуГЮуВжуГ│уГИчв║шкН
echo -e "\n5я╕ПтГг Docker ComposeшинхоЪуБочв║шкН"
run_test "custom.cnfуБоуГЮуВжуГ│уГИшинхоЪ" "grep -q 'custom.cnf:/etc/mysql/conf.d/custom.cnf' docker-compose.yml"

# 6. MySQLуВ│уГ│уГЖуГКуБохЖНш╡╖хЛХуБишинхоЪщБйчФичв║шкН
echo -e "\n6я╕ПтГг MySQLшинхоЪуБощБйчФичв║шкН"
echo "MySQLуВ│уГ│уГЖуГКуВТхЖНш╡╖хЛХуБЧуБжшинхоЪуВТщБйчФиуБЧуБ╛уБЩ..."
docker-compose restart mysql 2>/dev/null
sleep 15

# шинхоЪуБМщБйчФиуБХуВМуБжуБДуВЛуБЛчв║шкН
run_test "innodb_strict_mode = 0 (щБйчФичв║шкН)" \
    "docker-compose exec mysql mysql -uroot -proot_password -e 'SELECT @@innodb_strict_mode;' 2>/dev/null | grep -q '0'"

run_test "innodb_file_per_table = 1 (щБйчФичв║шкН)" \
    "docker-compose exec mysql mysql -uroot -proot_password -e 'SELECT @@innodb_file_per_table;' 2>/dev/null | grep -q '1'"

run_test "innodb_default_row_format = DYNAMIC (щБйчФичв║шкН)" \
    "docker-compose exec mysql mysql -uroot -proot_password -e 'SELECT @@innodb_default_row_format;' 2>/dev/null | grep -qi 'dynamic'"

run_test "max_allowed_packet >= 1GB (щБйчФичв║шкН)" \
    "docker-compose exec mysql mysql -uroot -proot_password -e 'SELECT @@max_allowed_packet;' 2>/dev/null | awk '{if(\$1 >= 1073741824) exit 0; else exit 1}'"

# 7. check_mysql_settings.shуВ╣уВпуГкуГЧуГИуБоуГЖуВ╣уГИ
echo -e "\n7я╕ПтГг шинхоЪчв║шкНуВ╣уВпуГкуГЧуГИуБоуГЖуВ╣уГИ"
if [ -f scripts/check_mysql_settings.sh ]; then
    run_test "check_mysql_settings.shхоЯшбМ" "bash scripts/check_mysql_settings.sh 2>&1 | grep -q 'innodb_strict_mode'"
else
    echo -e "${YELLOW}тЪая╕П check_mysql_settings.shуБМшжЛуБдуБЛуВКуБ╛уБЫуВУ${NC}"
fi

# 8. YAMLуГХуВбуВдуГлуБоцзЛцЦЗуГБуВзуГГуВп
echo -e "\n8я╕ПтГг YAMLшинхоЪуГХуВбуВдуГлуБоцзЛцЦЗуГБуВзуГГуВп"
cat > /tmp/test_yaml.py << 'EOF'
#!/usr/bin/env python3
import yaml
import sys

try:
    with open('configs/mykeibadb_connection.yaml', 'r') as f:
        config = yaml.safe_load(f)
    
    # х┐ЕщаИшинхоЪуБочв║шкН
    assert 'database' in config, "databaseшинхоЪуБМшжЛуБдуБЛуВКуБ╛уБЫуВУ"
    assert 'connection_timeout' in config['database'], "connection_timeoutшинхоЪуБМшжЛуБдуБЛуВКуБ╛уБЫуВУ"
    assert 'retry' in config, "retryшинхоЪуБМшжЛуБдуБЛуВКуБ╛уБЫуВУ"
    
    print("тЬЕ YAMLшинхоЪуГХуВбуВдуГлуБпцнгх╕╕уБзуБЩ")
    print(f"  Connection Timeout: {config['database']['connection_timeout']}чзТ")
    print(f"  Max Retries: {config['retry']['max_attempts']}хЫЮ")
    sys.exit(0)
    
except Exception as e:
    print(f"тЭМ уВиуГйуГ╝: {e}")
    sys.exit(1)
EOF

run_test "YAMLшинхоЪуГХуВбуВдуГлуБоцдЬши╝" "python3 /tmp/test_yaml.py"

# 9. Row size too largeуВиуГйуГ╝уБоуГЖуВ╣уГИ
echo -e "\n9я╕ПтГг Row size too largeуВиуГйуГ╝хп╛чнЦуБоуГЖуВ╣уГИ"
echo "хдзуБНуБкуГЖуГ╝уГЦуГлуВТф╜ЬцИРуБЧуБжуГЖуВ╣уГИ..."
cat > /tmp/test_row_size.sql << 'EOF'
CREATE TABLE IF NOT EXISTS test_large_row (
    id INT PRIMARY KEY,
    col1 VARCHAR(1000),
    col2 VARCHAR(1000),
    col3 VARCHAR(1000),
    col4 VARCHAR(1000),
    col5 VARCHAR(1000),
    col6 VARCHAR(1000),
    col7 VARCHAR(1000),
    col8 VARCHAR(1000),
    col9 TEXT,
    col10 TEXT
) ENGINE=InnoDB ROW_FORMAT=DYNAMIC;

INSERT INTO test_large_row VALUES (1, 
    REPEAT('A', 1000), REPEAT('B', 1000), REPEAT('C', 1000),
    REPEAT('D', 1000), REPEAT('E', 1000), REPEAT('F', 1000),
    REPEAT('G', 1000), REPEAT('H', 1000),
    REPEAT('I', 5000), REPEAT('J', 5000)
);

DROP TABLE test_large_row;
EOF

run_test "Row sizeхп╛чнЦуГЖуВ╣уГИ" \
    "docker-compose exec -T mysql mysql -uroot -proot_password keiba_db < /tmp/test_row_size.sql 2>&1 | grep -v 'Warning'"

# ч╡РцЮЬуВ╡уГЮуГкуГ╝
echo -e "\n========================================="
echo "уГЖуВ╣уГИч╡РцЮЬуВ╡уГЮуГкуГ╝"
echo "========================================="
echo -e "${GREEN}тЬЕ цИРхКЯ: $TESTS_PASSED${NC}"
echo -e "${RED}тЭМ хд▒цХЧ: $TESTS_FAILED${NC}"

if [ $TESTS_FAILED -eq 0 ]; then
    echo -e "\n${GREEN}ЁЯОЙ уБЩуБ╣уБжуБоуГЖуВ╣уГИуБМцИРхКЯуБЧуБ╛уБЧуБЯя╝Б${NC}"
    echo "PR #25уБошинхоЪуБпцнгх╕╕уБлхЛХф╜ЬуБЧуБжуБДуБ╛уБЩуАВ"
    echo ""
    echo "тЬЕ MySQLцЬАщБйхМЦшинхоЪуБМщБйчФиуБХуВМуБжуБДуБ╛уБЩ"
    echo "тЬЕ Row size too largeуВиуГйуГ╝хп╛чнЦуБМцЬЙхК╣уБзуБЩ"
    echo "тЬЕ mykeibaDBцОеч╢ЪшинхоЪуБМц║ЦхВЩуБХуВМуБжуБДуБ╛уБЩ"
    exit 0
else
    echo -e "\n${RED}тЪая╕П ф╕АщГиуБоуГЖуВ╣уГИуБМхд▒цХЧуБЧуБ╛уБЧуБЯ${NC}"
    echo "ф╕КшиШуБоуВиуГйуГ╝уВТчв║шкНуБЧуБжуБПуБауБХуБДуАВ"
    exit 1
fi