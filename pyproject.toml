[build-system]
requires = ["setuptools>=65", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "keiba-ai"
version = "0.1.0"
description = "競馬予想AIシステム"
authors = [{name = "Your Name", email = "your.email@example.com"}]
readme = "README.md"
requires-python = ">=3.10"
license = {text = "MIT"}
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
]

dependencies = [
    "fastapi>=0.104.0",
    "uvicorn[standard]>=0.24.0",
    "pydantic[email]>=2.5.0",
    "pydantic-settings>=2.1.0",
    "sqlalchemy>=2.0.0",
    "alembic>=1.13.0",
    "pymysql>=1.1.0",
    "cryptography>=41.0.0",
    "python-jose[cryptography]>=3.3.0",
    "python-multipart>=0.0.6",
    "passlib[bcrypt]>=1.7.4",
    "bcrypt>=4.1.0",
    "redis>=5.0.0",
    "celery>=5.3.0",
    "pandas>=2.1.0",
    "numpy>=1.24.0",
    "scikit-learn>=1.3.0",
    "lightgbm>=4.1.0",
    "xgboost>=2.0.0",
    "mlflow>=2.8.0",
    "streamlit>=1.28.0",
    "python-dotenv>=1.0.0",
    "loguru>=0.7.0",
    "httpx>=0.25.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "pytest-asyncio>=0.21.0",
    "black>=23.0.0",
    "flake8>=6.0.0",
    "mypy>=1.0.0",
    "isort>=5.12.0",
    "pre-commit>=3.3.0",
    "ipython>=8.0.0",
]

[tool.setuptools]
packages = ["src"]

[tool.black]
line-length = 88
target-version = ['py310']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
  | data
)/
'''

[tool.isort]
profile = "black"
line_length = 88
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true

[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
ignore_missing_imports = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true

[tool.pytest.ini_options]
minversion = "7.0"
testpaths = ["tests"]
pythonpath = ["src"]
addopts = [
    "-ra",
    "--strict-markers",
    "--cov=src",
    "--cov-report=html",
    "--cov-report=term-missing",
]

[tool.coverage.run]
source = ["src"]
omit = ["*/tests/*", "*/migrations/*"]

[tool.coverage.report]
precision = 2
show_missing = true
skip_covered = false

[tool.ruff]
line-length = 88
target-version = "py310"
extend-exclude = [
    "data/",
    "volumes/",
    "notebooks/",
    ".venv/",
    "venv/",
    "dist/",
    "build/",
    "*.egg-info",
    "__pycache__",
    ".mypy_cache/",
    ".pytest_cache/",
    ".git/",
    "alembic/versions/",
]

[tool.ruff.lint]
select = [
    "E",     # pycodestyle errors
    "W",     # pycodestyle warnings
    "F",     # pyflakes
    "I",     # isort
    "B",     # flake8-bugbear
    "C4",    # flake8-comprehensions
    "UP",    # pyupgrade
    "ARG",   # flake8-unused-arguments
    "COM",   # flake8-commas
    "T20",   # flake8-print
    "SIM",   # flake8-simplify
    "RET",   # flake8-return
    "PLR",   # pylint refactor
    "PLW",   # pylint warnings
    "TRY",   # tryceratops
    "RUF",   # ruff specific rules
]
ignore = [
    "E501",   # line too long (handled by formatter)
    "COM812", # missing-trailing-comma (conflicts with formatter)
    "TRY003", # long exception messages
    "PLR0913", # too many arguments
    "PLR2004", # magic value comparison
    "TRY300", # try-consider-else (not always necessary)
    "B007",   # unused-loop-control-variable (sometimes intentional)
    "B008",   # function-call-in-default-argument (FastAPI pattern)
    "ARG001", # unused-function-argument (may be required by interface)
    "ARG002", # unused-method-argument (may be required by interface)
    "PLR0912", # too-many-branches (complexity may be necessary)
    "PLR0911", # too-many-return-statements (may be clearer)
    "PLW1508", # invalid-envvar-default (integer defaults are OK)
    "RUF001", # ambiguous-unicode-character-string (Japanese is OK)
    "RUF002", # ambiguous-unicode-character-docstring (Japanese is OK)
    "RUF003", # ambiguous-unicode-character-comment (Japanese is OK)
    "TRY401", # verbose-log-message (redundant error in logging.exception)
    "E722",   # bare-except (sometimes necessary for robustness)
    "F821",   # undefined-name (may be defined elsewhere)
    "RUF012", # mutable-class-default (ClassVar annotations)
    "PLR0915", # too-many-statements (sometimes unavoidable)
    "SIM102", # collapsible-if (may hurt readability)
    "TRY301", # raise-within-try (sometimes necessary)
    "C408",   # unnecessary-collection-call (dict() is sometimes clearer)
    "RUF022", # unsorted-dunder-all (not critical)
    "PLW2901", # redefined-loop-name (sometimes intentional)
]

[tool.ruff.lint.per-file-ignores]
"tests/*" = ["T20"]  # allow print statements in tests
"scripts/*" = ["T20", "E402"]  # allow print statements and module level imports not at top in scripts
"*/migrations/*" = ["E501"]  # allow long lines in migrations
"alembic/versions/*" = ["E501"]  # allow long lines in alembic migrations

[tool.ruff.lint.isort]
known-first-party = ["src"]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

[dependency-groups]
dev = [
    "ruff==0.3.0",
]
